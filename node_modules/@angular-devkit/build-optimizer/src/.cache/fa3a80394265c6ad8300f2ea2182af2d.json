{"remainingRequest":"D:\\Projects\\test\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\test\\MouseFront\\node_modules\\ng2-youtube-player\\modules\\ng2-youtube-player.es5.js","dependencies":[{"path":"D:\\Projects\\test\\MouseFront\\node_modules\\ng2-youtube-player\\modules\\ng2-youtube-player.es5.js","mtime":1530096272120},{"path":"D:\\Projects\\test\\MouseFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530096264252},{"path":"D:\\Projects\\test\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1530096257981}],"contextDependencies":[],"result":["import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nvar YoutubePlayerService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} zone\n     */\n    function YoutubePlayerService(zone) {\n        this.zone = zone;\n        this.isFullscreen = false;\n        this.defaultSizes = {\n            height: 270,\n            width: 367\n        };\n        this.createApi();\n    }\n    Object.defineProperty(YoutubePlayerService, \"win\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return window;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(YoutubePlayerService, \"YT\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return YoutubePlayerService.win['YT'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(YoutubePlayerService, \"Player\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return YoutubePlayerService.YT.Player;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.loadPlayerApi = function (options) {\n        var /** @type {?} */ doc = YoutubePlayerService.win.document;\n        var /** @type {?} */ playerApiScript = doc.createElement(\"script\");\n        playerApiScript.type = \"text/javascript\";\n        playerApiScript.src = options.protocol + \"://www.youtube.com/iframe_api\";\n        doc.body.appendChild(playerApiScript);\n    };\n    /**\n     * @param {?} elementId\n     * @param {?} outputs\n     * @param {?} sizes\n     * @param {?=} videoId\n     * @param {?=} playerVars\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.setupPlayer = function (elementId, outputs, sizes, videoId, playerVars) {\n        var _this = this;\n        if (videoId === void 0) {\n            videoId = '';\n        }\n        var /** @type {?} */ createPlayer = function () {\n            if (YoutubePlayerService.Player) {\n                _this.createPlayer(elementId, outputs, sizes, videoId, playerVars);\n            }\n        };\n        this.api.subscribe(createPlayer);\n    };\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.play = function (player) {\n        player.playVideo();\n    };\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.pause = function (player) {\n        player.pauseVideo();\n    };\n    /**\n     * @param {?} media\n     * @param {?} player\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.playVideo = function (media, player) {\n        var /** @type {?} */ id = media.id.videoId ? media.id.videoId : media.id;\n        player.loadVideoById(id);\n        this.play(player);\n    };\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.isPlaying = function (player) {\n        // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING\n        var /** @type {?} */ isPlayerReady = player && player.getPlayerState;\n        var /** @type {?} */ playerState = isPlayerReady ? player.getPlayerState() : {};\n        var /** @type {?} */ isPlayerPlaying = isPlayerReady\n            ? playerState !== YT.PlayerState.ENDED && playerState !== YT.PlayerState.PAUSED\n            : false;\n        return isPlayerPlaying;\n    };\n    /**\n     * @param {?} elementId\n     * @param {?} outputs\n     * @param {?} sizes\n     * @param {?=} videoId\n     * @param {?=} playerVars\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.createPlayer = function (elementId, outputs, sizes, videoId, playerVars) {\n        var _this = this;\n        if (videoId === void 0) {\n            videoId = '';\n        }\n        if (playerVars === void 0) {\n            playerVars = {};\n        }\n        var /** @type {?} */ service = this;\n        var /** @type {?} */ playerSize = {\n            height: sizes.height || this.defaultSizes.height,\n            width: sizes.width || this.defaultSizes.width\n        };\n        return new YoutubePlayerService.Player(elementId, Object.assign({}, playerSize, {\n            events: {\n                onReady: function (ev) {\n                    _this.zone.run(function () { return outputs.ready && outputs.ready.next(ev.target); });\n                },\n                onStateChange: function (ev) {\n                    _this.zone.run(function () { return outputs.change && outputs.change.next(ev); });\n                    // this.zone.run(() => onPlayerStateChange(ev));\n                }\n            },\n            videoId: videoId,\n            playerVars: playerVars,\n        }));\n        // TODO: DEPRECATE?\n        // function onPlayerStateChange (event: any) {\n        //   const state = event.data;\n        //   const PlayerState = YoutubePlayerService.YT.PlayerState;\n        //   // play the next song if its not the end of the playlist\n        //   // should add a \"repeat\" feature\n        //   if (state === PlayerState.ENDED) {\n        //   }\n        //   if (state === PlayerState.PAUSED) {\n        //       // service.playerState = PlayerState.PAUSED;\n        //   }\n        //   if (state === PlayerState.PLAYING) {\n        //       // service.playerState = PlayerState.PLAYING;\n        //   }\n        // }\n    };\n    /**\n     * @param {?} player\n     * @param {?} isFullScreen\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.toggleFullScreen = function (player, isFullScreen) {\n        var _a = this.defaultSizes, height = _a.height, width = _a.width;\n        if (!isFullScreen) {\n            height = window.innerHeight;\n            width = window.innerWidth;\n        }\n        player.setSize(width, height);\n        // TODO: dispatch event\n    };\n    /**\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.generateUniqueId = function () {\n        var /** @type {?} */ len = 7;\n        return Math.random().toString(35).substr(2, len);\n    };\n    /**\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.createApi = function () {\n        var _this = this;\n        this.api = new ReplaySubject(1);\n        var /** @type {?} */ onYouTubeIframeAPIReady = function () {\n            if (YoutubePlayerService.win) {\n                _this.api.next(/** @type {?} */ (YoutubePlayerService.YT));\n            }\n        };\n        YoutubePlayerService.win['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;\n    };\n    return YoutubePlayerService;\n}());\nvar YoutubePlayerComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} playerService\n     * @param {?} elementRef\n     */\n    function YoutubePlayerComponent(playerService, elementRef) {\n        this.playerService = playerService;\n        this.elementRef = elementRef;\n        this.videoId = '';\n        /**\n         * \\@description sets the protocol by the navigator object\n         * if there is no window, it sets a default http protocol\n         * unless the protocol is set from outside\n         */\n        this.protocol = this.getProtocol();\n        this.playerVars = {};\n        // player created and initialized - sends instance of the player\n        this.ready = new EventEmitter();\n        // state change: send the YT event with its state\n        this.change = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    YoutubePlayerComponent.prototype.ngAfterContentInit = function () {\n        var /** @type {?} */ htmlId = this.playerService.generateUniqueId();\n        var /** @type {?} */ playerSize = { height: this.height, width: this.width };\n        this.ytPlayerContainer.nativeElement.setAttribute('id', htmlId);\n        this.playerService.loadPlayerApi({\n            protocol: this.protocol\n        });\n        this.playerService.setupPlayer(htmlId, {\n            change: this.change,\n            ready: this.ready,\n        }, playerSize, this.videoId, this.playerVars);\n    };\n    /**\n     * @return {?}\n     */\n    YoutubePlayerComponent.prototype.getProtocol = function () {\n        var /** @type {?} */ hasWindow = window && window.location;\n        var /** @type {?} */ protocol = hasWindow\n            ? window.location.protocol.replace(':', '')\n            : 'http';\n        return protocol;\n    };\n    return YoutubePlayerComponent;\n}());\nvar YoutubePlayerModule = /*@__PURE__*/ (function () {\n    function YoutubePlayerModule() {\n    }\n    return YoutubePlayerModule;\n}());\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n/**\n * Entry point for all public APIs of the package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { YoutubePlayerModule, YoutubePlayerComponent as Éµa, YoutubePlayerService as Éµb };\n//# sourceMappingURL=ng2-youtube-player.es5.js.map\n",null]}