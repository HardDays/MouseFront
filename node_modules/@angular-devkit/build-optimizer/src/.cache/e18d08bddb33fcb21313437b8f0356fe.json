{"remainingRequest":"D:\\Projects\\test\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\test\\MouseFront\\node_modules\\ngx-bootstrap\\timepicker\\timepicker-controls.util.js","dependencies":[{"path":"D:\\Projects\\test\\MouseFront\\node_modules\\ngx-bootstrap\\timepicker\\timepicker-controls.util.js","mtime":1531831366526},{"path":"D:\\Projects\\test\\MouseFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531831359037},{"path":"D:\\Projects\\test\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1531831354937}],"contextDependencies":[],"result":["import { changeTime } from './timepicker.utils';\r\nexport function canChangeValue(state, event) {\r\n    if (state.readonlyInput || state.disabled) {\r\n        return false;\r\n    }\r\n    if (event) {\r\n        if (event.source === 'wheel' && !state.mousewheel) {\r\n            return false;\r\n        }\r\n        if (event.source === 'key' && !state.arrowkeys) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexport function canChangeHours(event, controls) {\r\n    if (!event.step) {\r\n        return false;\r\n    }\r\n    if (event.step > 0 && !controls.canIncrementHours) {\r\n        return false;\r\n    }\r\n    if (event.step < 0 && !controls.canDecrementHours) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function canChangeMinutes(event, controls) {\r\n    if (!event.step) {\r\n        return false;\r\n    }\r\n    if (event.step > 0 && !controls.canIncrementMinutes) {\r\n        return false;\r\n    }\r\n    if (event.step < 0 && !controls.canDecrementMinutes) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function canChangeSeconds(event, controls) {\r\n    if (!event.step) {\r\n        return false;\r\n    }\r\n    if (event.step > 0 && !controls.canIncrementSeconds) {\r\n        return false;\r\n    }\r\n    if (event.step < 0 && !controls.canDecrementSeconds) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function getControlsValue(state) {\r\n    var hourStep = state.hourStep, minuteStep = state.minuteStep, secondsStep = state.secondsStep, readonlyInput = state.readonlyInput, disabled = state.disabled, mousewheel = state.mousewheel, arrowkeys = state.arrowkeys, showSpinners = state.showSpinners, showMeridian = state.showMeridian, showSeconds = state.showSeconds, meridians = state.meridians, min = state.min, max = state.max;\r\n    return {\r\n        hourStep: hourStep,\r\n        minuteStep: minuteStep,\r\n        secondsStep: secondsStep,\r\n        readonlyInput: readonlyInput,\r\n        disabled: disabled,\r\n        mousewheel: mousewheel,\r\n        arrowkeys: arrowkeys,\r\n        showSpinners: showSpinners,\r\n        showMeridian: showMeridian,\r\n        showSeconds: showSeconds,\r\n        meridians: meridians,\r\n        min: min,\r\n        max: max\r\n    };\r\n}\r\nexport function timepickerControls(value, state) {\r\n    var hoursPerDayHalf = 12;\r\n    var min = state.min, max = state.max, hourStep = state.hourStep, minuteStep = state.minuteStep, secondsStep = state.secondsStep, showSeconds = state.showSeconds;\r\n    var res = {\r\n        canIncrementHours: true,\r\n        canIncrementMinutes: true,\r\n        canIncrementSeconds: true,\r\n        canDecrementHours: true,\r\n        canDecrementMinutes: true,\r\n        canDecrementSeconds: true,\r\n        canToggleMeridian: true\r\n    };\r\n    if (!value) {\r\n        return res;\r\n    }\r\n    // compare dates\r\n    if (max) {\r\n        var _newHour = changeTime(value, { hour: hourStep });\r\n        res.canIncrementHours = max > _newHour;\r\n        if (!res.canIncrementHours) {\r\n            var _newMinutes = changeTime(value, { minute: minuteStep });\r\n            res.canIncrementMinutes = showSeconds\r\n                ? max > _newMinutes\r\n                : max >= _newMinutes;\r\n        }\r\n        if (!res.canIncrementMinutes) {\r\n            var _newSeconds = changeTime(value, { seconds: secondsStep });\r\n            res.canIncrementSeconds = max >= _newSeconds;\r\n        }\r\n        if (value.getHours() < hoursPerDayHalf) {\r\n            res.canToggleMeridian = changeTime(value, { hour: hoursPerDayHalf }) < max;\r\n        }\r\n    }\r\n    if (min) {\r\n        var _newHour = changeTime(value, { hour: -hourStep });\r\n        res.canDecrementHours = min < _newHour;\r\n        if (!res.canDecrementHours) {\r\n            var _newMinutes = changeTime(value, { minute: -minuteStep });\r\n            res.canDecrementMinutes = showSeconds\r\n                ? min < _newMinutes\r\n                : min <= _newMinutes;\r\n        }\r\n        if (!res.canDecrementMinutes) {\r\n            var _newSeconds = changeTime(value, { seconds: -secondsStep });\r\n            res.canDecrementSeconds = min <= _newSeconds;\r\n        }\r\n        if (value.getHours() >= hoursPerDayHalf) {\r\n            res.canToggleMeridian = changeTime(value, { hour: -hoursPerDayHalf }) > min;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n//# sourceMappingURL=timepicker-controls.util.js.map",null]}