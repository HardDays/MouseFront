{"remainingRequest":"D:\\Projects\\test\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Projects\\test\\MouseFront\\node_modules\\ngx-bootstrap\\chronos\\units\\week-year.js","dependencies":[{"path":"D:\\Projects\\test\\MouseFront\\node_modules\\ngx-bootstrap\\chronos\\units\\week-year.js","mtime":1531310094621},{"path":"D:\\Projects\\test\\MouseFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531310087730},{"path":"D:\\Projects\\test\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1531310082531}],"contextDependencies":[],"result":["import { addFormatToken } from '../format/format';\r\nimport { addUnitAlias } from './aliases';\r\nimport { addUnitPriority } from './priorities';\r\nimport { addRegexToken, match1to2, match1to4, match1to6, match2, match4, match6, matchSigned } from '../parse/regex';\r\nimport { addWeekParseToken } from '../parse/token';\r\nimport { toInt } from '../utils/type-checks';\r\nimport { parseTwoDigitYear } from './year';\r\nimport { dayOfYearFromWeeks, weekOfYear, weeksInYear } from './week-calendar-utils';\r\nimport { createUTCDate } from '../create/date-from-array';\r\nimport { getISOWeek, getWeek } from './week';\r\nimport { getISODayOfWeek, getLocaleDayOfWeek } from './day-of-week';\r\nimport { getLocale } from '../locale/locales';\r\nimport { setDate, setFullYear, setMonth } from '../utils/date-setters';\r\nimport { getDate, getFullYear, getMonth } from '../utils/date-getters';\r\n// FORMATTING\r\naddFormatToken(null, ['gg', 2, false], null, function (date, opts) {\r\n    // return this.weekYear() % 100;\r\n    return (getWeekYear(date, opts.locale) % 100).toString();\r\n});\r\naddFormatToken(null, ['GG', 2, false], null, function (date) {\r\n    // return this.isoWeekYear() % 100;\r\n    return (getISOWeekYear(date) % 100).toString();\r\n});\r\nfunction addWeekYearFormatToken(token, getter) {\r\n    addFormatToken(null, [token, token.length, false], null, getter);\r\n}\r\nfunction _getWeekYearFormatCb(date, opts) {\r\n    return getWeekYear(date, opts.locale).toString();\r\n}\r\nfunction _getISOWeekYearFormatCb(date) {\r\n    return getISOWeekYear(date).toString();\r\n}\r\naddWeekYearFormatToken('gggg', _getWeekYearFormatCb);\r\naddWeekYearFormatToken('ggggg', _getWeekYearFormatCb);\r\naddWeekYearFormatToken('GGGG', _getISOWeekYearFormatCb);\r\naddWeekYearFormatToken('GGGGG', _getISOWeekYearFormatCb);\r\n// ALIASES\r\naddUnitAlias('weekYear', 'gg');\r\naddUnitAlias('isoWeekYear', 'GG');\r\n// PRIORITY\r\naddUnitPriority('weekYear', 1);\r\naddUnitPriority('isoWeekYear', 1);\r\n// PARSING\r\naddRegexToken('G', matchSigned);\r\naddRegexToken('g', matchSigned);\r\naddRegexToken('GG', match1to2, match2);\r\naddRegexToken('gg', match1to2, match2);\r\naddRegexToken('GGGG', match1to4, match4);\r\naddRegexToken('gggg', match1to4, match4);\r\naddRegexToken('GGGGG', match1to6, match6);\r\naddRegexToken('ggggg', match1to6, match6);\r\naddWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\r\n    week[token.substr(0, 2)] = toInt(input);\r\n    return config;\r\n});\r\naddWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\r\n    week[token] = parseTwoDigitYear(input);\r\n    return config;\r\n});\r\n// MOMENTS\r\nexport function getSetWeekYear(date, input, locale) {\r\n    if (locale === void 0) { locale = getLocale(); }\r\n    return getSetWeekYearHelper(date, input, \r\n    // this.week(),\r\n    getWeek(date, locale), \r\n    // this.weekday(),\r\n    getLocaleDayOfWeek(date, locale), locale.firstDayOfWeek(), locale.firstDayOfYear());\r\n}\r\nexport function getWeekYear(date, locale) {\r\n    if (locale === void 0) { locale = getLocale(); }\r\n    return weekOfYear(date, locale.firstDayOfWeek(), locale.firstDayOfYear()).year;\r\n}\r\nexport function getSetISOWeekYear(date, input) {\r\n    return getSetWeekYearHelper(date, input, getISOWeek(date), getISODayOfWeek(date), 1, 4);\r\n}\r\nexport function getISOWeekYear(date) {\r\n    return weekOfYear(date, 1, 4).year;\r\n}\r\nexport function getISOWeeksInYear(date, isUTC) {\r\n    return weeksInYear(getFullYear(date, isUTC), 1, 4);\r\n}\r\nexport function getWeeksInYear(date, isUTC, locale) {\r\n    if (locale === void 0) { locale = getLocale(); }\r\n    return weeksInYear(getFullYear(date, isUTC), locale.firstDayOfWeek(), locale.firstDayOfYear());\r\n}\r\nfunction getSetWeekYearHelper(date, input, week, weekday, dow, doy) {\r\n    if (!input) {\r\n        return getWeekYear(date);\r\n    }\r\n    var weeksTarget = weeksInYear(input, dow, doy);\r\n    var _week = week > weeksTarget ? weeksTarget : week;\r\n    return setWeekAll(date, input, _week, weekday, dow, doy);\r\n}\r\nfunction setWeekAll(date, weekYear, week, weekday, dow, doy) {\r\n    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\r\n    var _date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\r\n    setFullYear(_date, getFullYear(_date, true));\r\n    setMonth(_date, getMonth(_date, true));\r\n    setDate(_date, getDate(_date, true));\r\n    return _date;\r\n}\r\n//# sourceMappingURL=week-year.js.map",null]}