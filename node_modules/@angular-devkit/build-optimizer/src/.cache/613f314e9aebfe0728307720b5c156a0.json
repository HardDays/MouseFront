{"remainingRequest":"C:\\Code\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Code\\MouseFront\\node_modules\\ngx-bootstrap\\timepicker\\timepicker.utils.js","dependencies":[{"path":"C:\\Code\\MouseFront\\node_modules\\ngx-bootstrap\\timepicker\\timepicker.utils.js","mtime":1529331032050},{"path":"C:\\Code\\MouseFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529331021643},{"path":"C:\\Code\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1529331019567}],"contextDependencies":[],"result":["var dex = 10;\r\nvar hoursPerDay = 24;\r\nvar hoursPerDayHalf = 12;\r\nvar minutesPerHour = 60;\r\nvar secondsPerMinute = 60;\r\nexport function isValidDate(value) {\r\n    if (!value) {\r\n        return false;\r\n    }\r\n    if (value instanceof Date && isNaN(value.getHours())) {\r\n        return false;\r\n    }\r\n    if (typeof value === 'string') {\r\n        return isValidDate(new Date(value));\r\n    }\r\n    return true;\r\n}\r\nexport function isValidLimit(controls, newDate) {\r\n    if (controls.min && newDate < controls.min) {\r\n        return false;\r\n    }\r\n    if (controls.max && newDate > controls.max) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function toNumber(value) {\r\n    if (typeof value === 'number') {\r\n        return value;\r\n    }\r\n    return parseInt(value, dex);\r\n}\r\nexport function isNumber(value) {\r\n    return !isNaN(toNumber(value));\r\n}\r\nexport function parseHours(value, isPM) {\r\n    if (isPM === void 0) { isPM = false; }\r\n    var hour = toNumber(value);\r\n    if (isNaN(hour) ||\r\n        hour < 0 ||\r\n        hour > (isPM ? hoursPerDayHalf : hoursPerDay)) {\r\n        return NaN;\r\n    }\r\n    return hour;\r\n}\r\nexport function parseMinutes(value) {\r\n    var minute = toNumber(value);\r\n    if (isNaN(minute) || minute < 0 || minute > minutesPerHour) {\r\n        return NaN;\r\n    }\r\n    return minute;\r\n}\r\nexport function parseSeconds(value) {\r\n    var seconds = toNumber(value);\r\n    if (isNaN(seconds) || seconds < 0 || seconds > secondsPerMinute) {\r\n        return NaN;\r\n    }\r\n    return seconds;\r\n}\r\nexport function parseTime(value) {\r\n    if (typeof value === 'string') {\r\n        return new Date(value);\r\n    }\r\n    return value;\r\n}\r\nexport function changeTime(value, diff) {\r\n    if (!value) {\r\n        return changeTime(createDate(new Date(), 0, 0, 0), diff);\r\n    }\r\n    var hour = value.getHours();\r\n    var minutes = value.getMinutes();\r\n    var seconds = value.getSeconds();\r\n    if (diff.hour) {\r\n        hour = (hour + toNumber(diff.hour)) % hoursPerDay;\r\n        if (hour < 0) {\r\n            hour += hoursPerDay;\r\n        }\r\n    }\r\n    if (diff.minute) {\r\n        minutes = minutes + toNumber(diff.minute);\r\n    }\r\n    if (diff.seconds) {\r\n        seconds = seconds + toNumber(diff.seconds);\r\n    }\r\n    return createDate(value, hour, minutes, seconds);\r\n}\r\nexport function setTime(value, opts) {\r\n    var hour = parseHours(opts.hour);\r\n    var minute = parseMinutes(opts.minute);\r\n    var seconds = parseSeconds(opts.seconds) || 0;\r\n    if (opts.isPM) {\r\n        hour += hoursPerDayHalf;\r\n    }\r\n    if (!value) {\r\n        if (!isNaN(hour) && !isNaN(minute)) {\r\n            return createDate(new Date(), hour, minute, seconds);\r\n        }\r\n        return value;\r\n    }\r\n    if (isNaN(hour) || isNaN(minute)) {\r\n        return value;\r\n    }\r\n    return createDate(value, hour, minute, seconds);\r\n}\r\nexport function createDate(value, hours, minutes, seconds) {\r\n    return new Date(value.getFullYear(), value.getMonth(), value.getDate(), hours, minutes, seconds, value.getMilliseconds());\r\n}\r\nexport function padNumber(value) {\r\n    var _value = value.toString();\r\n    if (_value.length > 1) {\r\n        return _value;\r\n    }\r\n    return \"0\" + _value;\r\n}\r\nexport function isHourInputValid(hours, isPM) {\r\n    return !isNaN(parseHours(hours, isPM));\r\n}\r\nexport function isMinuteInputValid(minutes) {\r\n    return !isNaN(parseMinutes(minutes));\r\n}\r\nexport function isSecondInputValid(seconds) {\r\n    return !isNaN(parseSeconds(seconds));\r\n}\r\nexport function isInputLimitValid(diff, max, min) {\r\n    var newDate = changeTime(new Date(), diff);\r\n    if (max && newDate > max) {\r\n        return false;\r\n    }\r\n    if (min && newDate < min) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function isInputValid(hours, minutes, seconds, isPM) {\r\n    if (minutes === void 0) { minutes = '0'; }\r\n    if (seconds === void 0) { seconds = '0'; }\r\n    return isHourInputValid(hours, isPM)\r\n        && isMinuteInputValid(minutes)\r\n        && isSecondInputValid(seconds);\r\n}\r\n//# sourceMappingURL=timepicker.utils.js.map",null]}