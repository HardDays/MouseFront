{"remainingRequest":"C:\\Code\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Code\\MouseFront\\node_modules\\@ngui\\auto-complete\\dist\\auto-complete.directive.js","dependencies":[{"path":"C:\\Code\\MouseFront\\node_modules\\@ngui\\auto-complete\\dist\\auto-complete.directive.js","mtime":1525690576349},{"path":"C:\\Code\\MouseFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529331021643},{"path":"C:\\Code\\MouseFront\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1529331019567}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar auto_complete_component_1 = require(\"./auto-complete.component\");\nvar forms_1 = require(\"@angular/forms\");\n/**\n * display auto-complete section with input and dropdown list when it is clicked\n */\nvar NguiAutoCompleteDirective = /*@__PURE__*/ (function () {\n    function NguiAutoCompleteDirective(resolver, viewContainerRef, parentForm) {\n        var _this = this;\n        this.resolver = resolver;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n        this.autocomplete = false;\n        this.acceptUserInput = true;\n        this.loadingTemplate = null;\n        this.loadingText = \"Loading\";\n        this.tabToSelect = true;\n        this.selectOnBlur = false;\n        this.matchFormatted = false;\n        this.autoSelectFirstItem = false;\n        this.openOnFocus = true;\n        this.closeOnFocusOut = true;\n        this.reFocusAfterSelect = true;\n        this.zIndex = \"1\";\n        this.isRtl = false;\n        this.ngModelChange = new core_1.EventEmitter();\n        this.valueChanged = new core_1.EventEmitter();\n        this.customSelected = new core_1.EventEmitter();\n        //show auto-complete list below the current element\n        this.showAutoCompleteDropdown = function (event) {\n            if (_this.dropdownJustHidden) {\n                return;\n            }\n            _this.hideAutoCompleteDropdown();\n            _this.scheduledBlurHandler = null;\n            var factory = _this.resolver.resolveComponentFactory(auto_complete_component_1.NguiAutoCompleteComponent);\n            _this.componentRef = _this.viewContainerRef.createComponent(factory);\n            var component = _this.componentRef.instance;\n            component.keyword = _this.inputEl.value;\n            component.showInputTag = false; //Do NOT display autocomplete input tag separately\n            component.pathToData = _this.pathToData;\n            component.minChars = _this.minChars;\n            component.source = _this.source;\n            component.placeholder = _this.autoCompletePlaceholder;\n            component.acceptUserInput = _this.acceptUserInput;\n            component.maxNumList = parseInt(_this.maxNumList, 10);\n            component.loadingText = _this.loadingText;\n            component.loadingTemplate = _this.loadingTemplate;\n            component.listFormatter = _this.listFormatter;\n            component.blankOptionText = _this.blankOptionText;\n            component.noMatchFoundText = _this.noMatchFoundText;\n            component.tabToSelect = _this.tabToSelect;\n            component.selectOnBlur = _this.selectOnBlur;\n            component.matchFormatted = _this.matchFormatted;\n            component.autoSelectFirstItem = _this.autoSelectFirstItem;\n            component.valueSelected.subscribe(_this.selectNewValue);\n            component.textEntered.subscribe(_this.enterNewText);\n            component.customSelected.subscribe(_this.selectCustomValue);\n            _this.acDropdownEl = _this.componentRef.location.nativeElement;\n            _this.acDropdownEl.style.display = \"none\";\n            // if this element is not an input tag, move dropdown after input tag\n            // so that it displays correctly\n            if (_this.el.tagName !== \"INPUT\" && _this.acDropdownEl) {\n                _this.inputEl.parentElement.insertBefore(_this.acDropdownEl, _this.inputEl.nextSibling);\n            }\n            _this.revertValue = typeof _this.ngModel !== \"undefined\" ? _this.ngModel : _this.inputEl.value;\n            setTimeout(function () {\n                component.reloadList(_this.inputEl.value);\n                _this.styleAutoCompleteDropdown();\n                component.dropdownVisible = true;\n            });\n        };\n        this.hideAutoCompleteDropdown = function (event) {\n            if (_this.componentRef) {\n                var currentItem = void 0;\n                var hasRevertValue = (typeof _this.revertValue !== \"undefined\");\n                if (_this.inputEl && hasRevertValue && _this.acceptUserInput === false) {\n                    currentItem = _this.componentRef.instance.findItemFromSelectValue(_this.inputEl.value);\n                }\n                _this.componentRef.destroy();\n                _this.componentRef = undefined;\n                if (_this.inputEl && hasRevertValue && _this.acceptUserInput === false && currentItem === null) {\n                    _this.selectNewValue(_this.revertValue);\n                }\n                else if (_this.inputEl && _this.acceptUserInput === true && typeof currentItem === \"undefined\" && event && event.target.value) {\n                    _this.enterNewText(event.target.value);\n                }\n            }\n            _this.dropdownJustHidden = true;\n            setTimeout(function () { return _this.dropdownJustHidden = false; }, 100);\n        };\n        this.styleAutoCompleteDropdown = function () {\n            if (_this.componentRef) {\n                var component = _this.componentRef.instance;\n                /* setting width/height auto complete */\n                var thisElBCR = _this.el.getBoundingClientRect();\n                var thisInputElBCR = _this.inputEl.getBoundingClientRect();\n                var closeToBottom = thisInputElBCR.bottom + 100 > window.innerHeight;\n                var directionOfStyle = _this.isRtl ? 'right' : 'left';\n                _this.acDropdownEl.style.width = thisInputElBCR.width + \"px\";\n                _this.acDropdownEl.style.position = \"absolute\";\n                _this.acDropdownEl.style.zIndex = _this.zIndex;\n                _this.acDropdownEl.style[directionOfStyle] = \"0\";\n                _this.acDropdownEl.style.display = \"inline-block\";\n                if (closeToBottom) {\n                    _this.acDropdownEl.style.bottom = thisInputElBCR.height + \"px\";\n                }\n                else {\n                    _this.acDropdownEl.style.top = thisInputElBCR.height + \"px\";\n                }\n            }\n        };\n        this.selectNewValue = function (item) {\n            // make displayable value\n            if (item && typeof item === \"object\") {\n                item = _this.setToStringFunction(item);\n            }\n            _this.renderValue(item);\n            // make return value\n            var val = item;\n            if (_this.selectValueOf && item[_this.selectValueOf]) {\n                val = item[_this.selectValueOf];\n            }\n            if ((_this.parentForm && _this.formControlName) || _this.extFormControl) {\n                if (!!val) {\n                    _this.formControl.patchValue(val);\n                }\n            }\n            (val !== _this.ngModel) && _this.ngModelChange.emit(val);\n            _this.valueChanged.emit(val);\n            _this.hideAutoCompleteDropdown();\n            setTimeout(function () {\n                if (_this.reFocusAfterSelect) {\n                    _this.inputEl.focus();\n                }\n                return _this.inputEl;\n            });\n        };\n        this.selectCustomValue = function (text) {\n            _this.customSelected.emit(text);\n            _this.hideAutoCompleteDropdown();\n            setTimeout(function () {\n                if (_this.reFocusAfterSelect) {\n                    _this.inputEl.focus();\n                }\n                return _this.inputEl;\n            });\n        };\n        this.enterNewText = function (value) {\n            _this.renderValue(value);\n            _this.ngModelChange.emit(value);\n            _this.valueChanged.emit(value);\n            _this.hideAutoCompleteDropdown();\n        };\n        this.keydownEventHandler = function (evt) {\n            if (_this.componentRef) {\n                var component = _this.componentRef.instance;\n                component.inputElKeyHandler(evt);\n            }\n        };\n        this.inputEventHandler = function (evt) {\n            if (_this.componentRef) {\n                var component = _this.componentRef.instance;\n                component.dropdownVisible = true;\n                component.keyword = evt.target.value;\n                component.reloadListInDelay(evt);\n            }\n            else {\n                _this.showAutoCompleteDropdown();\n            }\n        };\n        this.el = this.viewContainerRef.element.nativeElement;\n    }\n    NguiAutoCompleteDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        // Blur event is handled only after a click event. This is to prevent handling of blur events resulting from interacting with a scrollbar\n        // introduced by content overflow (Internet explorer issue).\n        // See issue description here: http://stackoverflow.com/questions/2023779/clicking-on-a-divs-scroll-bar-fires-the-blur-event-in-ie\n        this.documentClickListener = function (e) {\n            if (_this.scheduledBlurHandler) {\n                _this.scheduledBlurHandler();\n                _this.scheduledBlurHandler = null;\n            }\n        };\n        document.addEventListener('click', this.documentClickListener);\n        // wrap this element with <div class=\"ngui-auto-complete\">\n        this.wrapperEl = document.createElement(\"div\");\n        this.wrapperEl.className = \"ngui-auto-complete-wrapper\";\n        this.wrapperEl.style.position = \"relative\";\n        this.el.parentElement.insertBefore(this.wrapperEl, this.el.nextSibling);\n        this.wrapperEl.appendChild(this.el);\n        //Check if we were supplied with a [formControlName] and it is inside a [form]\n        //else check if we are supplied with a [FormControl] regardless if it is inside a [form] tag\n        if (this.parentForm && this.formControlName) {\n            if (this.parentForm['form']) {\n                this.formControl = this.parentForm['form'].get(this.formControlName);\n            }\n            else if (this.parentForm instanceof forms_1.FormGroupName) {\n                this.formControl = this.parentForm.control.controls[this.formControlName];\n            }\n        }\n        else if (this.extFormControl) {\n            this.formControl = this.extFormControl;\n        }\n        // apply toString() method for the object\n        if (!!this.ngModel) {\n            this.selectNewValue(this.ngModel);\n        }\n        else if (!!this.formControl && this.formControl.value) {\n            this.selectNewValue(this.formControl.value[this.displayPropertyName]);\n        }\n    };\n    NguiAutoCompleteDirective.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        // if this element is not an input tag, move dropdown after input tag\n        // so that it displays correctly\n        this.inputEl = this.el.tagName === \"INPUT\" ?\n            this.el : this.el.querySelector(\"input\");\n        if (this.openOnFocus) {\n            this.inputEl.addEventListener('focus', function (e) { return _this.showAutoCompleteDropdown(e); });\n        }\n        if (this.closeOnFocusOut) {\n            this.inputEl.addEventListener('focusout', function (e) { return _this.hideAutoCompleteDropdown(e); });\n        }\n        if (!this.autocomplete) {\n            this.inputEl.setAttribute('autocomplete', 'off');\n        }\n        this.inputEl.addEventListener('blur', function (e) {\n            _this.scheduledBlurHandler = function () {\n                return _this.blurHandler(e);\n            };\n        });\n        this.inputEl.addEventListener('keydown', function (e) { return _this.keydownEventHandler(e); });\n        this.inputEl.addEventListener('input', function (e) { return _this.inputEventHandler(e); });\n    };\n    NguiAutoCompleteDirective.prototype.ngOnDestroy = function () {\n        if (this.componentRef) {\n            this.componentRef.instance.valueSelected.unsubscribe();\n            this.componentRef.instance.textEntered.unsubscribe();\n        }\n        if (this.documentClickListener) {\n            document.removeEventListener('click', this.documentClickListener);\n        }\n    };\n    NguiAutoCompleteDirective.prototype.ngOnChanges = function (changes) {\n        if (changes['ngModel']) {\n            this.ngModel = this.setToStringFunction(changes['ngModel'].currentValue);\n            this.renderValue(this.ngModel);\n        }\n    };\n    NguiAutoCompleteDirective.prototype.blurHandler = function (event) {\n        if (this.componentRef) {\n            var component = this.componentRef.instance;\n            if (this.selectOnBlur) {\n                component.selectOne(component.filteredList[component.itemIndex]);\n            }\n            this.hideAutoCompleteDropdown(event);\n        }\n    };\n    NguiAutoCompleteDirective.prototype.setToStringFunction = function (item) {\n        if (item && typeof item === \"object\") {\n            var displayVal_1;\n            if (typeof this.valueFormatter === 'string') {\n                var matches = this.valueFormatter.match(/[a-zA-Z0-9_\\$]+/g);\n                var formatted_1 = this.valueFormatter;\n                if (matches && typeof item !== 'string') {\n                    matches.forEach(function (key) {\n                        formatted_1 = formatted_1.replace(key, item[key]);\n                    });\n                }\n                displayVal_1 = formatted_1;\n            }\n            else if (typeof this.valueFormatter === 'function') {\n                displayVal_1 = this.valueFormatter(item);\n            }\n            else if (this.displayPropertyName) {\n                displayVal_1 = item[this.displayPropertyName];\n            }\n            else if (typeof this.listFormatter === 'string' && this.listFormatter.match(/^\\w+$/)) {\n                displayVal_1 = item[this.listFormatter];\n            }\n            else {\n                displayVal_1 = item.value;\n            }\n            item.toString = function () { return displayVal_1; };\n        }\n        return item;\n    };\n    NguiAutoCompleteDirective.prototype.renderValue = function (item) {\n        this.inputEl && (this.inputEl.value = '' + item);\n    };\n    NguiAutoCompleteDirective.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: \"[auto-complete], [ngui-auto-complete]\"\n                },] },\n    ];\n    NguiAutoCompleteDirective.propDecorators = {\n        'autocomplete': [{ type: core_1.Input, args: [\"autocomplete\",] },],\n        'autoCompletePlaceholder': [{ type: core_1.Input, args: [\"auto-complete-placeholder\",] },],\n        'source': [{ type: core_1.Input, args: [\"source\",] },],\n        'pathToData': [{ type: core_1.Input, args: [\"path-to-data\",] },],\n        'minChars': [{ type: core_1.Input, args: [\"min-chars\",] },],\n        'displayPropertyName': [{ type: core_1.Input, args: [\"display-property-name\",] },],\n        'acceptUserInput': [{ type: core_1.Input, args: [\"accept-user-input\",] },],\n        'maxNumList': [{ type: core_1.Input, args: [\"max-num-list\",] },],\n        'selectValueOf': [{ type: core_1.Input, args: [\"select-value-of\",] },],\n        'loadingTemplate': [{ type: core_1.Input, args: [\"loading-template\",] },],\n        'listFormatter': [{ type: core_1.Input, args: [\"list-formatter\",] },],\n        'loadingText': [{ type: core_1.Input, args: [\"loading-text\",] },],\n        'blankOptionText': [{ type: core_1.Input, args: [\"blank-option-text\",] },],\n        'noMatchFoundText': [{ type: core_1.Input, args: [\"no-match-found-text\",] },],\n        'valueFormatter': [{ type: core_1.Input, args: [\"value-formatter\",] },],\n        'tabToSelect': [{ type: core_1.Input, args: [\"tab-to-select\",] },],\n        'selectOnBlur': [{ type: core_1.Input, args: [\"select-on-blur\",] },],\n        'matchFormatted': [{ type: core_1.Input, args: [\"match-formatted\",] },],\n        'autoSelectFirstItem': [{ type: core_1.Input, args: [\"auto-select-first-item\",] },],\n        'openOnFocus': [{ type: core_1.Input, args: [\"open-on-focus\",] },],\n        'closeOnFocusOut': [{ type: core_1.Input, args: [\"close-on-focusout\",] },],\n        'reFocusAfterSelect': [{ type: core_1.Input, args: [\"re-focus-after-select\",] },],\n        'ngModel': [{ type: core_1.Input },],\n        'formControlName': [{ type: core_1.Input, args: ['formControlName',] },],\n        'extFormControl': [{ type: core_1.Input, args: ['formControl',] },],\n        'zIndex': [{ type: core_1.Input, args: [\"z-index\",] },],\n        'isRtl': [{ type: core_1.Input, args: [\"is-rtl\",] },],\n        'ngModelChange': [{ type: core_1.Output },],\n        'valueChanged': [{ type: core_1.Output },],\n        'customSelected': [{ type: core_1.Output },],\n    };\n    return NguiAutoCompleteDirective;\n}());\nexports.NguiAutoCompleteDirective = NguiAutoCompleteDirective;\n",null]}